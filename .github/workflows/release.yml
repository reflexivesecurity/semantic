name: Test and Release Version

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine pyaml
        python setup.py install

    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 ./cloudmitigator_semantic --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 ./cloudmitigator_semantic --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Lint with pylint
      run: |
        pip install pylint
        pylint ./cloudmitigator_semantic/

    - name: Test with unittest
      run: |
        python -m unittest discover -v

    - name: See if Version Changed
      run: |
        CHANGED=$(semantic changed)
        if [ "${CHANGED}" == "True" ]
          then
            echo ::set-env name=VERSION_CHANGED::${CHANGED}
            echo ::set-env name=VERSION::$(semantic version)
            echo ::set-env name=EGG::$(ls dist)
        fi
        
    - name: Create Release
      if: env.VERSION_CHANGED
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: false
      
    - name: Upload Release Asset
      if: env.VERSION_CHANGED
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./dist/${{ env.EGG }}
        asset_name: ${{ env.EGG }}
        asset_content_type: application/zip
      
    - name: Build and publish
      if: env.VERSION_CHANGED
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        export VERSION=env.version_array
        python setup.py sdist bdist_wheel
        twine upload dist/*
